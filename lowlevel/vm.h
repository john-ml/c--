/*
  The virtual machine has four components:
    Instruction pointer: variables IP_ ## 0 .. IP_ ## (WORD_SIZE - 1)
    Argument pointer: variables AP_ ## 0 .. AP_ ## (WORD_SIZE - 1)
    Temp register: variables TMP_ ## 0 .. TMP_ ## (WORD_SIZE - 1)
    Main memory: variables MEM_ ## 0 .. MEM_ ## (MEM_SIZE * WORD_SIZE - 1)

  Layout in memory:
    LO [instruction1 arg1 instruction2 arg2 .. instructionN argN] HI

  This file defines preprocessor logic that reads the current
  instruction from MEM[IP], evaluates it, increments IP, and
  sends the new VM state (as well as this code) onto the next
  preprocessor pass.

  In order for data to persist across preprocessor passes, each
  variable has a lowercase analogue. The state will alternate
  between uppercase and lowercase variables with each pass.

  Instructions are processed only when variables are in uppercase.
  This allows for time between instructions for changing values
  and referencing parts of memory. It also makes the code for handling
  each instruction consistent--uppercase always represents a value
  at the current time step, and lowercase always represents a value
  at the next time step.
*/

// To allow data to persist across passes, we need to emit
// directives but not evaluate them.
#define DEFINE #define
#define IF #if
#define ELSE #else
#define ELIF #elif
#define ENDIF #endif

// Allow state to persist across passes
#ifdef IP_0000
DEFINE tmp_0000 TMP_0000
DEFINE tmp_0001 TMP_0001
DEFINE tmp_0010 TMP_0010
DEFINE tmp_0011 TMP_0011
DEFINE mem_0000 MEM_0000
DEFINE mem_0001 MEM_0001
DEFINE mem_0010 MEM_0010
DEFINE mem_0011 MEM_0011
DEFINE mem_0100 MEM_0100
DEFINE mem_0101 MEM_0101
DEFINE mem_0110 MEM_0110
DEFINE mem_0111 MEM_0111
DEFINE mem_1000 MEM_1000
DEFINE mem_1001 MEM_1001
DEFINE mem_1010 MEM_1010
DEFINE mem_1011 MEM_1011
DEFINE mem_1100 MEM_1100
DEFINE mem_1101 MEM_1101
DEFINE mem_1110 MEM_1110
DEFINE mem_1111 MEM_1111
DEFINE mem_10000 MEM_10000
DEFINE mem_10001 MEM_10001
DEFINE mem_10010 MEM_10010
DEFINE mem_10011 MEM_10011
#else
DEFINE IP_0000 ip_0000
DEFINE IP_0001 ip_0001
DEFINE IP_0010 ip_0010
DEFINE IP_0011 ip_0011
DEFINE AP_0000 ap_0000
DEFINE AP_0001 ap_0001
DEFINE AP_0010 ap_0010
DEFINE AP_0011 ap_0011
DEFINE TMP_0000 tmp_0000
DEFINE TMP_0001 tmp_0001
DEFINE TMP_0010 tmp_0010
DEFINE TMP_0011 tmp_0011
DEFINE MEM_0000 mem_0000
DEFINE MEM_0001 mem_0001
DEFINE MEM_0010 mem_0010
DEFINE MEM_0011 mem_0011
DEFINE MEM_0100 mem_0100
DEFINE MEM_0101 mem_0101
DEFINE MEM_0110 mem_0110
DEFINE MEM_0111 mem_0111
DEFINE MEM_1000 mem_1000
DEFINE MEM_1001 mem_1001
DEFINE MEM_1010 mem_1010
DEFINE MEM_1011 mem_1011
DEFINE MEM_1100 mem_1100
DEFINE MEM_1101 mem_1101
DEFINE MEM_1110 mem_1110
DEFINE MEM_1111 mem_1111
DEFINE MEM_10000 mem_10000
DEFINE MEM_10001 mem_10001
DEFINE MEM_10010 mem_10010
DEFINE MEM_10011 mem_10011
#endif

// increment IP and AP
#ifdef IP_0000
#if IP_0000 == 0000
DEFINE ip_0000 1000
DEFINE ip_0001 1001
DEFINE ip_0010 1010
DEFINE ip_0011 1011
DEFINE ap_0000 1100
DEFINE ap_0001 1101
DEFINE ap_0010 1110
DEFINE ap_0011 1111
#elif IP_0000 == 0100
DEFINE ip_0000 1100
DEFINE ip_0001 1101
DEFINE ip_0010 1110
DEFINE ip_0011 1111
DEFINE ap_0000 10000
DEFINE ap_0001 10001
DEFINE ap_0010 10010
DEFINE ap_0011 10011
#elif IP_0000 == 1000
DEFINE ip_0000 10000
DEFINE ip_0001 10001
DEFINE ip_0010 10010
DEFINE ip_0011 10011
DEFINE ap_0000 0000
DEFINE ap_0001 0001
DEFINE ap_0010 0010
DEFINE ap_0011 0011
#elif IP_0000 == 1100
DEFINE ip_0000 0000
DEFINE ip_0001 0001
DEFINE ip_0010 0010
DEFINE ip_0011 0011
DEFINE ap_0000 0100
DEFINE ap_0001 0101
DEFINE ap_0010 0110
DEFINE ap_0011 0111
#elif IP_0000 == 10000
DEFINE ip_0000 0100
DEFINE ip_0001 0101
DEFINE ip_0010 0110
DEFINE ip_0011 0111
DEFINE ap_0000 1000
DEFINE ap_0001 1001
DEFINE ap_0010 1010
DEFINE ap_0011 1011
#endif
#else
#endif

// Needed to reference data in memory
#define CAT(a, b) a ## b
#define EMPTY()
#define DEFER(x) x EMPTY()
#define EVAL(...) __VA_ARGS__
#define EQUALS(i, j) IF i == j
#define EEQUALS(i, j) ELIF i == j
#define GET(i, j) DEFINE CAT(tmp_, i) CAT(MEM_, j)
#define SETIMM(i, j) DEFINE CAT(tmp_, i) j
#define SET(i, j) DEFINE CAT(mem_, i) CAT(TMP_, j)
#define HIGH(i) DEFINE CAT(tmp_, i) 1
#define LOW(i) DEFINE CAT(tmp_, i) 0
#define BOTHTRUE(i, j) IF (CAT(MEM_, i) != 0) && (CAT(TMP_, j) != 0)
#define BOTHFALSE(i, j) IF (CAT(MEM_, i) == 0) && (CAT(TMP_, j) == 0)
#define TMPTRUE(i) IF CAT(TMP_, i) != 0
#define MEMTRUE(i) IF CAT(MEM_, i) != 0
#define SETPTR(p, i) DEFINE p CAT(MEM_, i)

// Extract instruction and argument
#define INSTR EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(, EVAL(DEFER(CAT)(MEM_, IP_0000)))), EVAL(DEFER(CAT)(MEM_, IP_0001)))), EVAL(DEFER(CAT)(MEM_, IP_0010)))), EVAL(DEFER(CAT)(MEM_, IP_0011))))
#define ARG EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(EVAL(DEFER(CAT)(, EVAL(DEFER(CAT)(MEM_, AP_0000)))), EVAL(DEFER(CAT)(MEM_, AP_0001)))), EVAL(DEFER(CAT)(MEM_, AP_0010)))), EVAL(DEFER(CAT)(MEM_, AP_0011))))

// Process the instruction at MEM[IP]
#ifdef IP_0000
EQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, LOAD)))
EQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0000)))
GET(0000, 0000)
GET(0001, 0001)
GET(0010, 0010)
GET(0011, 0011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0001)))
GET(0000, 0100)
GET(0001, 0101)
GET(0010, 0110)
GET(0011, 0111)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0010)))
GET(0000, 1000)
GET(0001, 1001)
GET(0010, 1010)
GET(0011, 1011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0011)))
GET(0000, 1100)
GET(0001, 1101)
GET(0010, 1110)
GET(0011, 1111)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0100)))
GET(0000, 10000)
GET(0001, 10001)
GET(0010, 10010)
GET(0011, 10011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, LOADIMM)))
SETIMM(0000, EVAL(DEFER(CAT)(MEM_, AP_0000)))
SETIMM(0001, EVAL(DEFER(CAT)(MEM_, AP_0001)))
SETIMM(0010, EVAL(DEFER(CAT)(MEM_, AP_0010)))
SETIMM(0011, EVAL(DEFER(CAT)(MEM_, AP_0011)))
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, STORE)))
EQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0000)))
SET(0000, 0000)
SET(0001, 0001)
SET(0010, 0010)
SET(0011, 0011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0001)))
SET(0100, 0000)
SET(0101, 0001)
SET(0110, 0010)
SET(0111, 0011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0010)))
SET(1000, 0000)
SET(1001, 0001)
SET(1010, 0010)
SET(1011, 0011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0011)))
SET(1100, 0000)
SET(1101, 0001)
SET(1110, 0010)
SET(1111, 0011)
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0100)))
SET(10000, 0000)
SET(10001, 0001)
SET(10010, 0010)
SET(10011, 0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, AND)))
EQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0000)))
BOTHTRUE(0000, 0000)
HIGH(0000)
ELSE
LOW(0000)
ENDIF
BOTHTRUE(0001, 0001)
HIGH(0001)
ELSE
LOW(0001)
ENDIF
BOTHTRUE(0010, 0010)
HIGH(0010)
ELSE
LOW(0010)
ENDIF
BOTHTRUE(0011, 0011)
HIGH(0011)
ELSE
LOW(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0001)))
BOTHTRUE(0100, 0000)
HIGH(0000)
ELSE
LOW(0000)
ENDIF
BOTHTRUE(0101, 0001)
HIGH(0001)
ELSE
LOW(0001)
ENDIF
BOTHTRUE(0110, 0010)
HIGH(0010)
ELSE
LOW(0010)
ENDIF
BOTHTRUE(0111, 0011)
HIGH(0011)
ELSE
LOW(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0010)))
BOTHTRUE(1000, 0000)
HIGH(0000)
ELSE
LOW(0000)
ENDIF
BOTHTRUE(1001, 0001)
HIGH(0001)
ELSE
LOW(0001)
ENDIF
BOTHTRUE(1010, 0010)
HIGH(0010)
ELSE
LOW(0010)
ENDIF
BOTHTRUE(1011, 0011)
HIGH(0011)
ELSE
LOW(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0011)))
BOTHTRUE(1100, 0000)
HIGH(0000)
ELSE
LOW(0000)
ENDIF
BOTHTRUE(1101, 0001)
HIGH(0001)
ELSE
LOW(0001)
ENDIF
BOTHTRUE(1110, 0010)
HIGH(0010)
ELSE
LOW(0010)
ENDIF
BOTHTRUE(1111, 0011)
HIGH(0011)
ELSE
LOW(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0100)))
BOTHTRUE(10000, 0000)
HIGH(0000)
ELSE
LOW(0000)
ENDIF
BOTHTRUE(10001, 0001)
HIGH(0001)
ELSE
LOW(0001)
ENDIF
BOTHTRUE(10010, 0010)
HIGH(0010)
ELSE
LOW(0010)
ENDIF
BOTHTRUE(10011, 0011)
HIGH(0011)
ELSE
LOW(0011)
ENDIF
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, OR)))
EQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0000)))
BOTHFALSE(0000, 0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
BOTHFALSE(0001, 0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
BOTHFALSE(0010, 0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
BOTHFALSE(0011, 0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0001)))
BOTHFALSE(0100, 0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
BOTHFALSE(0101, 0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
BOTHFALSE(0110, 0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
BOTHFALSE(0111, 0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0010)))
BOTHFALSE(1000, 0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
BOTHFALSE(1001, 0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
BOTHFALSE(1010, 0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
BOTHFALSE(1011, 0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0011)))
BOTHFALSE(1100, 0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
BOTHFALSE(1101, 0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
BOTHFALSE(1110, 0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
BOTHFALSE(1111, 0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0100)))
BOTHFALSE(10000, 0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
BOTHFALSE(10001, 0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
BOTHFALSE(10010, 0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
BOTHFALSE(10011, 0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, NOT)))
TMPTRUE(0000)
LOW(0000)
ELSE
HIGH(0000)
ENDIF
TMPTRUE(0001)
LOW(0001)
ELSE
HIGH(0001)
ENDIF
TMPTRUE(0010)
LOW(0010)
ELSE
HIGH(0010)
ENDIF
TMPTRUE(0011)
LOW(0011)
ELSE
HIGH(0011)
ENDIF
EEQUALS(EVAL(DEFER(CAT)(1, INSTR)), EVAL(DEFER(CAT)(1, JMP)))
EQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0000)))
DEFINE ip_0000 0000
DEFINE ip_0001 0001
DEFINE ip_0010 0010
DEFINE ip_0011 0011
DEFINE ap_0000 0100
DEFINE ap_0001 0101
DEFINE ap_0010 0110
DEFINE ap_0011 0111
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0001)))
DEFINE ip_0000 0001
DEFINE ip_0001 0010
DEFINE ip_0010 0011
DEFINE ip_0011 0100
DEFINE ap_0000 0101
DEFINE ap_0001 0110
DEFINE ap_0010 0111
DEFINE ap_0011 1000
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0010)))
DEFINE ip_0000 0010
DEFINE ip_0001 0011
DEFINE ip_0010 0100
DEFINE ip_0011 0101
DEFINE ap_0000 0110
DEFINE ap_0001 0111
DEFINE ap_0010 1000
DEFINE ap_0011 1001
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0011)))
DEFINE ip_0000 0011
DEFINE ip_0001 0100
DEFINE ip_0010 0101
DEFINE ip_0011 0110
DEFINE ap_0000 0111
DEFINE ap_0001 1000
DEFINE ap_0010 1001
DEFINE ap_0011 1010
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0100)))
DEFINE ip_0000 0100
DEFINE ip_0001 0101
DEFINE ip_0010 0110
DEFINE ip_0011 0111
DEFINE ap_0000 1000
DEFINE ap_0001 1001
DEFINE ap_0010 1010
DEFINE ap_0011 1011
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0101)))
DEFINE ip_0000 0101
DEFINE ip_0001 0110
DEFINE ip_0010 0111
DEFINE ip_0011 1000
DEFINE ap_0000 1001
DEFINE ap_0001 1010
DEFINE ap_0010 1011
DEFINE ap_0011 1100
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0110)))
DEFINE ip_0000 0110
DEFINE ip_0001 0111
DEFINE ip_0010 1000
DEFINE ip_0011 1001
DEFINE ap_0000 1010
DEFINE ap_0001 1011
DEFINE ap_0010 1100
DEFINE ap_0011 1101
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 0111)))
DEFINE ip_0000 0111
DEFINE ip_0001 1000
DEFINE ip_0010 1001
DEFINE ip_0011 1010
DEFINE ap_0000 1011
DEFINE ap_0001 1100
DEFINE ap_0010 1101
DEFINE ap_0011 1110
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1000)))
DEFINE ip_0000 1000
DEFINE ip_0001 1001
DEFINE ip_0010 1010
DEFINE ip_0011 1011
DEFINE ap_0000 1100
DEFINE ap_0001 1101
DEFINE ap_0010 1110
DEFINE ap_0011 1111
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1001)))
DEFINE ip_0000 1001
DEFINE ip_0001 1010
DEFINE ip_0010 1011
DEFINE ip_0011 1100
DEFINE ap_0000 1101
DEFINE ap_0001 1110
DEFINE ap_0010 1111
DEFINE ap_0011 10000
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1010)))
DEFINE ip_0000 1010
DEFINE ip_0001 1011
DEFINE ip_0010 1100
DEFINE ip_0011 1101
DEFINE ap_0000 1110
DEFINE ap_0001 1111
DEFINE ap_0010 10000
DEFINE ap_0011 10001
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1011)))
DEFINE ip_0000 1011
DEFINE ip_0001 1100
DEFINE ip_0010 1101
DEFINE ip_0011 1110
DEFINE ap_0000 1111
DEFINE ap_0001 10000
DEFINE ap_0010 10001
DEFINE ap_0011 10010
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1100)))
DEFINE ip_0000 1100
DEFINE ip_0001 1101
DEFINE ip_0010 1110
DEFINE ip_0011 1111
DEFINE ap_0000 10000
DEFINE ap_0001 10001
DEFINE ap_0010 10010
DEFINE ap_0011 10011
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1101)))
DEFINE ip_0000 1101
DEFINE ip_0001 1110
DEFINE ip_0010 1111
DEFINE ip_0011 10000
DEFINE ap_0000 10001
DEFINE ap_0001 10010
DEFINE ap_0010 10011
DEFINE ap_0011 0000
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1110)))
DEFINE ip_0000 1110
DEFINE ip_0001 1111
DEFINE ip_0010 10000
DEFINE ip_0011 10001
DEFINE ap_0000 10010
DEFINE ap_0001 10011
DEFINE ap_0010 0000
DEFINE ap_0011 0001
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 1111)))
DEFINE ip_0000 1111
DEFINE ip_0001 10000
DEFINE ip_0010 10001
DEFINE ip_0011 10010
DEFINE ap_0000 10011
DEFINE ap_0001 0000
DEFINE ap_0010 0001
DEFINE ap_0011 0010
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 10000)))
DEFINE ip_0000 10000
DEFINE ip_0001 10001
DEFINE ip_0010 10010
DEFINE ip_0011 10011
DEFINE ap_0000 0000
DEFINE ap_0001 0001
DEFINE ap_0010 0010
DEFINE ap_0011 0011
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 10001)))
DEFINE ip_0000 10001
DEFINE ip_0001 10010
DEFINE ip_0010 10011
DEFINE ip_0011 0000
DEFINE ap_0000 0001
DEFINE ap_0001 0010
DEFINE ap_0010 0011
DEFINE ap_0011 0100
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 10010)))
DEFINE ip_0000 10010
DEFINE ip_0001 10011
DEFINE ip_0010 0000
DEFINE ip_0011 0001
DEFINE ap_0000 0010
DEFINE ap_0001 0011
DEFINE ap_0010 0100
DEFINE ap_0011 0101
EEQUALS(EVAL(DEFER(CAT)(1, ARG)), EVAL(DEFER(CAT)(1, 10011)))
DEFINE ip_0000 10011
DEFINE ip_0001 0000
DEFINE ip_0010 0001
DEFINE ip_0011 0010
DEFINE ap_0000 0011
DEFINE ap_0001 0100
DEFINE ap_0010 0101
DEFINE ap_0011 0110
ENDIF
ENDIF
#else
#endif

/*
  Finally, all of the above declarations need to persist across passes.
*/
#define PERSIST #include __FILE__
PERSIST
