// a separate header file must be used for definitions that
// need to persist across preprocessor passes
#include "examples.h"

#if 0
cyc cyc cyc (1, 2, 3, 4, 5)

// nop necessary to make preprocessor wait for the _'s to finish
swp nop2 (a _ (b _ (c, d)))

// isempty
isempty ((3, ))
isempty ((), )
isempty (zero, ) // zero is just an empty tuple

// conditionals
if (false, 1, 2, )
if (true, 1, 2, )
if isempty ((), 1, 2, )
if isempty ((3) _ (1, 2))

// connectives
and (false, false)
and (false, true)
and (true, false)
and (true, true)
or (false, false)
or (false, true)
or (true, false)
or (true, true)
not (false, )
not (true, )

// arithmetic
pred (zero)
succ succ (zero)
pred succ (zero)
pred succ succ (zero)
plus dup succ succ (zero)

// (2 + 2 = 4) - 1 = 3 (not-so-quick maths)
pred plus dup succ succ (zero)

// 1 + 2 + ... + 23 = 23 * 24 / 2 = 276 
triangular succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ succ (zero)

// 9 * 4 = 36
mult ((s, s, s, s, s, s, s, s, s, ), (s, s, s, s, ))

// 3 * 3 * 3 * 3 * 3 = 243
mult mult mult mult dup dup dup dup ((s, s, s, ))

// 3^5 = 243
pow ((s, s, s, ), (s, s, s, s, s, ))

// 5 - 3 = 2
minus ((s, s, s, s, s, ), (s, s, s, ))

// 5^2 - 3^2 = 16
minus mult dup ((s, s, s, s, s, ), top mult dup ((s, s, s, )))

// 4^2 = 16
pow ((s, s, s, s, ), (s, s, ))

// tail ([1, 2, 3] ++ [4, 5, 6]) = [2, 3, 4, 5, 6]
tail concat ((1, 2, 3), (4, 5, 6))

// map (tail) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] = [[2, 3], [5, 6], [8, 9]]
map (tail, ((1, 2, 3), (4, 5, 6), (7, 8, 9)))
map (tail, ())

// map (+1) [3, 1, 0] = [4, 2, 1]
map (succ, ((s, s, s, ), (s, s, ), zero))

// map (**2) [3, 4, 5] = [9, 16, 25]
map (mult dup, ((s, s, s, ), (s, s, s, s, ), (s, s, s, s, s, )))

// let xs = map (**2) [3, 4, 5] in
// let a = xs !! 0, b = xs !! 1, c = xs !! 2 in
//   (a + b) - c
// = 0
minus plus top nop2 map (mult dup, ((s, s, s, ), (s, s, s, s, ), (s, s, s, s, s, )))

// let f = (\(a, b) -> a * b) . (\a -> (a, a)) in (f . f) $ 3 = 3^4 = 81
apply compose dup compose (mult, dup, (s, s, s, ))

// foldr (+) 0 [1, 2, 3] = 6
foldr (plus, zero, ((s, ), (s, s, ), (s, s, s, )))

// foldr (*) 1 [1, 2, 3, 4, 5] = 120
// Finishes in 43 passes (but the 2nd to last pass involves a huge amount
// of text, since all computation has been delayed until then)
foldr nop4 (mult, (s, ), succ dup succ dup succ dup succ dup ((s, )))

// foldl (*) 1 [1, 2, 3, 4, 5] = 120
// Finishes in 133 passes, but never accumulates computations like foldr
foldl nop4 (mult, (s, ), succ dup succ dup succ dup succ dup ((s, )))
#endif
map compose (mult, dup, ((s, s, s, ), (s, s, s, s, ), (s, s, s, s, s, )))
